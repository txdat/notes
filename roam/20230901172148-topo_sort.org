:PROPERTIES:
:ID:       de8c6b97-4b79-4747-9762-3a7b472c1639
:END:
#+title: topo-sort

topological sort of directed acyclic graph (DAG) is linear ordering of its vertices

#+begin_src C++
#include <vector>

using namespace std;

// return true if graph is circular graph (containing a cycle)
bool topo_dfs(int n, vector<vector<int>> &before, vector<bool> &visited, vector<int> &pos, int i, int p = 0) {
  if (visited[i]) return true;
  if (p < pos[i]) return false; // needn't update position from i
  visited[i] = true;
  pos[i] = p++;
  for (int &j : before[i]) {
    if (topo_dfs(n, before, visited, pos, j, p)) return true;
  }
  return visited[i] = false;
}

vector<int> topo_sort(int n, vector<vector<int>> &before) {
  vector<bool> visited(n, false);
  vector<int> pos(n, 0);

  for (int i = 0; i < n; i++) {
    if (topo_dfs(n, before, visited, pos, i)) return {};
  }

  vector<int> ans(n);
  iota(ans.begin(), ans.end(), 0);
  sort(ans.begin(), ans.end(), [&](int i, int j) { return pos[i] > pos[j]; });
  return ans;
}
#+end_src
