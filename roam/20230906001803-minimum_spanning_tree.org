:PROPERTIES:
:ID:       d3f9662e-240f-4ad5-bcbe-80adb205058a
:END:
#+title: minimum-spanning-tree

* find critical and pseudo-critical edges in minimum spanning tree
- critical: removing it makes graph cannot be connected or has a larger weight
- pseudo-critical: removing it makes graph has **equal weight** and doesn't have any cycle if including it

example:[[https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree][ leetcode]]

#+begin_src C++
#include <algorithm>
#include <vector>

using namespace std;

int p[1000];

int find_parent(int i) {
  int j = i;
  while (p[i] != -1) i = p[i];
  if (j != i) p[j] = i;
  return i;
}

// return mst weight
int build_mst(int n, vector<vector<int>> &edges, int ignore = -1, int keep = -1) {
  memset(p, -1, sizeof(p));

  int m = edges.size(), w = 0;
  // always include this edge in mst
  if (keep != -1) {
    auto &e = edges[keep];
    p[e[1]] = e[0];
    w += e[2];
  }

  for (int i = 0; i < m; i++) {
    // always excludes this edge in mst
    if (i == ignore || i == keep) continue;

    auto &e = edges[i];
    int p0 = find_parent(e[0]), p1 = find_parent(e[1]);
    if (p0 != p1) {
      p[p1] = p0;
      w += e[2];
    }
  }

  // check graph is not connected
  int c = 0;
  for (int i = 0; i < n; i++) c += p[i] == -1;
  return c > 1 ? -1 : w;
}

vector<vector<int>> findCriticalAndPseudoCriticalEdges(int n, vector<vector<int>> &edges) {
  // sort edges by weight increasing
  int m = edges.size();
  for (int i = 0; i < m; i++) edges[i].push_back(i);
  sort(edges.begin(), edges.end(), [&](vector<int> &e1, vector<int> &e2) { return e1[2] < e2[2]; });

  vector<int> critical, pseudo_critical;

  // get mst weight
  const w0 = build_mst(n, edges);
  for (int i = 0; i < m; i++) {
    int w = build_mst(n, edges, i); // ignore this edge
    if (w == -1 || w > w0) {
      critical.push_back(edges[i][3]);
    } else if (build_mst(n, edges, -1, i) == w0) { // try to keep this edge in mst
      pseudo_critical.push_back(edges[i][3]);
    }
  }

  return { critical, pseudo_critical };
}
#+end_src
